1. add webpack và webpack cli
==> add vào devDependencies
==> thêm dòng '"build": "webpack"' vào trong 'script' trong file package .json

2.tạo 2 folder src và dist 
dist để chứa file webpack.config.js 

3. Sử dụng các Loader và biên dịch SASS
' yarn add sass sass-loader -D'
==> nếu muốn dùng css trong webpack thì phải cài 'style-loader' và 'css-loader'
==> cài vào devDependencies

Xong thì vào trong file 'webpack.config.js' thêm vào :

  module: {
    rules: [
      {
        test: /\.s[ac]ss|css$/,
        use: ['style-loader', 'css-loader','sass-loader']
      }
    ]
  }


  ============ HTML webpack plugin =================

'yarn add html-webpack-plugin -D'
==> thêm dòng vào trong webpack.config.js
'const HtmlWebpackPlugin = require('html-webpack-plugin')'

và thêm vào trong module.exports :
plugins: [
    new HtmlWebpackPlugin({
      title: 'Webpack App',
      filename: 'index.html',
      template: 'src/template.html'
    })
  ] 

=========== MINI CSS EXTRACT PLUGIN==============

Vấn đề khi chèn style bằng JS
Vấn đề hiện tại là CSS đang được JS DOM vào nên xảy ra tình trạng "chớp trắng" khi mới load trang.
Tăng size file JS lên rất nhiều

Cách fix
Dùng mini-css-extract-plugin để tách nó ra thành những file riêng
Chạy câu lệnh yarn add mini-css-extract-plugin -D để cài
Lưu ý
Hãy đảm bảo bạn đã cài và đang dùng plugin html-webpack-plugin, vì nó cần plugin này để tự động generate ra thẻ <link> trong file index.html
Không dùng plugin style-loader cùng với mini-css-extract-plugin. Nếu đang dùng style-loader thì xóa nó đi, 2 thằng này xung đột với nhau


sửa  module  và thêm trong file webpack.config.js
const MiniCssExtractPlugin = require('mini-css-extract-plugin')

  module: {
    rules: [
      {
        test: /\.s[ac]ss|css$/,
        use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']
      }
    ]
  }

  thêm vào phần plugin 
   new MiniCssExtractPlugin(),

   ========  Giải quyết caching với Hash name file ===========

    Vấn đề cache cứng đầu (Cache Stale):
Khi cập nhật file (ví dụ: style.css hoặc app.js), trình duyệt vẫn sử dụng phiên bản cũ từ cache.
Dẫn đến lỗi giao diện hoặc chức năng vì tệp mới không được tải xuống.
✅ Giải pháp: Sử dụng hash trong tên file
Thay vì lưu app.js hoặc style.css, ta đổi tên tệp bằng cách thêm hash (chuỗi ký tự ngẫu nhiên hoặc theo nội dung file):

Ví dụ:
Copy code
style.css  →  style.3f9a1d2.css  
app.js     →  app.b7c8e9f.js

sửa lại file webpack.config.js : 

const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')

module.exports = {
  // Xác định chế độ chạy của Webpack, có thể là 'development' hoặc 'production'.
  // Điều này giúp Webpack tối ưu hóa quá trình đóng gói tùy thuộc vào môi trường.
  mode: 'production',
  // Xác định điểm đầu vào (entry point) của ứng dụng.
  // Đây là tệp JavaScript hoặc tệp chính của ứng dụng mà Webpack sẽ bắt đầu đóng gói.
  entry: {
    app: path.resolve('./src/index.js')
  },
  // Nơi Webpack sẽ lưu các tệp đã được đóng gói và tên của các tệp đó.
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].[contenthash].js'
  },

  module: {
    rules: [
      {
        test: /\.s[ac]ss|css$/,
        use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']
      }
    ]
  },

  //html web pack plugin
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].[contenthash].css'
    }),
    new HtmlWebpackPlugin({
      title: 'HTML Plugin',
      //tên file muốn build ra 
      filename: 'index.html',
      //muốn render dựa trên 1 file có sẵn 
      template: 'src/template.html'
    })
  ]
};


