Nếu như chúng ta viết code JS có các cú pháp của phiên bản ES2022 thì những trình duyệt cũ chỉ chạy được ES6 sẽ không thể hiểu được code và dẫn đến lỗi. Vì thế transpile code thành các version cũ hơn là cần thiết. Công cụ transpile phổ biến nhất là Babel

Để sử dụng Babel ở webpack các bạn cần cài yarn add @babel/core @babel/preset-env babel-loader -D.

Để mình giải thích luôn thằng @babel/core là lõi của Babel

@babel/preset-env là bộ preset (thiết lập sẵn) cho từng đối tượng môi trường

babel-loader dùng để tích hợp Babel vào webpack.

sửa lại file webpack.config.js 


const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const { clear } = require('console');

module.exports = (env) =>  {
  const mode =  Boolean(env.development)
  return {
    // Xác định chế độ chạy của Webpack, có thể là 'development' hoặc 'production'.
    // Điều này giúp Webpack tối ưu hóa quá trình đóng gói tùy thuộc vào môi trường.
    mode: mode ? 'development' : 'production',
    // Xác định điểm đầu vào (entry point) của ứng dụng.
    // Đây là tệp JavaScript hoặc tệp chính của ứng dụng mà Webpack sẽ bắt đầu đóng gói.
    entry: {
      app: path.resolve('./src/index.js')
    },
    // Nơi Webpack sẽ lưu các tệp đã được đóng gói và tên của các tệp đó.
    output: {
      path: path.resolve(__dirname, 'dist'),
      filename: '[name].[contenthash].js',
      clean : true 
    },
  
    module: {
      rules: [
        {
          test: /\.s[ac]ss|css$/,
          use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']  
        },
        {
          test: /\.js$/,
          exclude: /node_modules/,
          use: {
            loader: 'babel-loader',
            options: {
              presets: ['@babel/preset-env']
            }
          }
        }
      ]
    },
  
    //html web pack plugin
    plugins: [
      new MiniCssExtractPlugin({
        filename: '[name].[contenthash].css'
      }),
      new HtmlWebpackPlugin({
        title: 'HTML Plugin',
        //tên file muốn build ra 
        filename: 'index.html',
        //muốn render dựa trên 1 file có sẵn 
        template: 'src/template.html'
      })
    ],
  //không cần dùng live server trong vs ==> cái này lưu trực tiếp vào RAM
    devServer: {
      static: {
        directory: 'dist' // Đường dẫn tương đối đến với thư mục chứa index.html
      },
      port: 3000, // Port thay cho port mặc định (8080)
      open: true, // Mở trang webpack khi chạy terminal
      hot: true, // Bật tính năng reload nhanh Hot Module Replacement
      compress: true, // Bật Gzip cho các tài nguyên
      historyApiFallback: true // Set true nếu bạn dùng cho các SPA và sử dụng History API của HTML5
    },

    devtool: mode ? 'source-map' : false,

  }
};


